

May 31
    Heap vs. Stack
        Heap variables extend beyond specific functions

June 5
    Objects
        Implementation
            Objects are just structs

        properties and access modifiers
        
        Constructors/Deconstructors
            If you define something in the heap in the constructor, you must
            "delete 

            Deconstructors
                Run automatically at the end of the "main" program

        Copy constructor
            creates an object that has the same data but stored at unique memory
            location. 
            
            for ex. Employee c2 = Employee(c1);

    Data management: heap vs. stack vs. global variable

        Destroying data:
            delete varName; varName = null;

        Java vs C++
            Java has a garbage collector -> so you don't need to delete
            variables defined in the heap
    
June 7 
    Classes memory
        If you just set an object equal to another memory in heap will be same;
        memory in stack will not be the same

    Accessing (dot vs. ->)
        foo->bar() is the same as (*foo).bar().
        
    Friendship
        friend: keyword for classes and functions so that they can access
        private and protected members


June 12-14
    Generics

    Inheritance
        "this keyword"
            the "this" keyword is always 'secretly' passed as the first argument
            to any class method

        public vs private vs protected
            public allows access to all methods private allows access to no
            methods protected allows access to all methods?

            default = private

        "virtual" keyword
            virtual functions are functions that can be overridden by a derived
            class

            compiler contains a special table 
                - contains pointers to all virtual functions - called the
                virtual function table (vtable)
            
            called "late binding"
                - compiler doesn't know which function to call until runtime -
                contrasted with early binding (normal function calls)
            
            "pure virtual method"
                - a virtual method that is not defined in the base class
                - used to force derived classes to implement the method
                - virtual void intro() = 0;
                - CANNOT CREATE OBJECTS OF THIS CLASS => HAS NOT IMPLEMENTATION!!!
                - CAN ONLY CREATE POINTERS TO THIS CLASS
                    - Person *p = new Student("John", 20, 3.5); 
                    - p->intro(); // calls Student::intro()




